# -*- coding: utf-8 -*-
"""baseline_recur_run.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u6P-QFeVrqskgySUMdLj1yekOB0zrDTd
"""

from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

!ls /content/gdrive/MyDrive/MIT/9.66


"""### Get clear 9/7/4 images and confidence scores"""

# USED: Plot the clearest 9, 7, 4 digits
import matplotlib.pyplot as plt
import numpy as np

x_test_all = np.load('/content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/binary-mnist/original_28x28/all_digits_all_pixels/x_test.npy')
y_test_all = np.load('/content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/binary-mnist/original_28x28/all_digits_all_pixels/y_test.npy')

# ambiguous_9_7 = [2583, 2940, 4094, 4164, 4506, 4663, 6572, 9643]
# ambiguous_9_4 = [1902, 2131, 2772, 3822, 3851, 4370, 4762, 8528]
clear_9 = [9, 12, 58, 99, 1058, 4009, 4030, 4047]
clear_7 = [0, 17, 34, 79, 83, 86, 1091, 4049]
clear_4 = [19, 27, 49, 56, 295, 1080, 4042, 4046]
# idxs = ambiguous_9_7+ambiguous_9_4+clear_9+clear_7+clear_4
idxs = clear_9+clear_7+clear_4
imgs = []

for i in idxs:
  imgs.append(x_test_all[i].reshape(28,28))

_, axs = plt.subplots(3,8, figsize=(10, 5))
axs = axs.flatten()
# imgs = np.take(testX, idxs)
for img, ax in zip(imgs, axs):
    ax.imshow(img, cmap='gray')
plt.show()

# USED: Compute confidence scores for the above; train on ORIGINAL data
# TODO: run for 30 random seeds and combine with below code
!python /content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/clear_confidence.py 12 7 9

# continuation from above
!python /content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/clear_confidence_9_4.py 12 4 9

"""### Get ambiguous 9/7 images and confidence scores"""

# USED: train 9/7 network on RAW data and get confidence scores
!python /content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/recurrence_mnist.py 12 7 9 0

# USED: Generate 8 9/7 ambiguous images and corresponding confidence
conf_scores_9 = np.load('/content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/conf_scores_9_7.npy')
conf_scores_7 = np.load('/content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/conf_scores_7.npy')

# min7 = conf_scores_7.argsort()[:100]
# min9 = conf_scores_9.argsort()[:100]

min9 = conf_scores_9.argsort()[:100][[19, 33, 49, 54, 60, 64, 69, 96]][[0,1,4,5,6,7]]
min7 = conf_scores_7.argsort()[:100][[37, 40, 48, 45, 46, 51, 69, 84, 87, 90]][[6,7]]

x_test_all = np.load('/content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/binary-mnist/original_28x28/all_digits_all_pixels/x_test.npy')
y_test_all = np.load('/content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/binary-mnist/original_28x28/all_digits_all_pixels/y_test.npy')
zeroidx = y_test_all == 7
oneidx = y_test_all == 9
filteridx = zeroidx+oneidx
x_test = x_test_all[filteridx]
y_test = y_test_all[filteridx]
y_test[y_test==7] = 0
y_test[y_test==9] = 1

print(x_test[y_test==0].shape[0], conf_scores_7.shape[0]) # check this equals conf_scores_7.shape
print(x_test[y_test==1].shape[0], conf_scores_9.shape[0]) # check this equals conf_scores_9.shape

images_7 = x_test[y_test==0]
images_9 = x_test[y_test==1]

images_to_show = []
for img in x_test[y_test==0][min9]:
  images_to_show.append(img.reshape(28,28))

for img in x_test[y_test==1][min7]:
  images_to_show.append(img.reshape(28,28))

_, axs = plt.subplots(1,8, figsize=(10, 10))
axs = axs.flatten()
for img, ax in zip(images_to_show, axs):
    ax.imshow(img, cmap='gray')
plt.show()

print(len(min7), len(min9))
print(conf_scores_7[min9])
print(conf_scores_9[min7])

# _, axs = plt.subplots(2,9, figsize=(20, 10))
# axs = axs.flatten()
# for img, ax in zip(images_to_show, axs):
#     ax.imshow(img, cmap='gray')
# plt.show()

# axs = plt.subplots(20,10, figsize=(40, 20))
# axs = axs.flatten()
# for img, ax in zip(images_to_show, axs):
#     ax.imshow(img, cmap='gray')
# plt.show()


"""### Get ambiguous 9/4 images and confidence scores"""

# USED: train 9/4 network on RAW data and get confidence scores
!python /content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/recurrence_mnist.py 12 4 9 0

# USED: Generate 8 9/4 ambiguous images and corresponding confidence

conf_scores_9 = np.load('/content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/conf_scores_9_4.npy')
conf_scores_4 = np.load('/content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/conf_scores_4.npy')

# min4 = conf_scores_4.argsort()[:100]
min9 = conf_scores_9.argsort()[:100][[8, 13, 17, 19, 20, 65, 67, 97]]
min9[min9>982] = 0

# min9 = conf_scores_9.argsort()[:100][[19, 33, 49, 54, 60, 64, 69, 96]][[0,1,4,5,6,7]]
# min7 = conf_scores_7.argsort()[:100][[37, 40, 48, 45, 46, 51, 69, 84, 87, 90]][[6,7]]

x_test_all = np.load('/content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/binary-mnist/original_28x28/all_digits_all_pixels/x_test.npy')
y_test_all = np.load('/content/gdrive/MyDrive/MIT/9.66/assemblies_mnist_demo/binary-mnist/original_28x28/all_digits_all_pixels/y_test.npy')
zeroidx = y_test_all == 4
oneidx = y_test_all == 9
filteridx = zeroidx+oneidx
x_test = x_test_all[filteridx]
y_test = y_test_all[filteridx]
y_test[y_test==4] = 0
y_test[y_test==9] = 1

print(x_test[y_test==0].shape[0], conf_scores_4.shape[0]) # check this equals conf_scores_7.shape
print(x_test[y_test==1].shape[0], conf_scores_9.shape[0]) # check this equals conf_scores_9.shape

images_4 = x_test[y_test==0]
images_9 = x_test[y_test==1]

images_to_show = []
for img in x_test[y_test==0][min9]:
  images_to_show.append(img.reshape(28,28))

# for img in x_test[y_test==1][min4]:
#   images_to_show.append(img.reshape(28,28))

_, axs = plt.subplots(1,8, figsize=(10, 10))
axs = axs.flatten()
for img, ax in zip(images_to_show, axs):
    ax.imshow(img, cmap='gray')
plt.show()

# print(len(min4), len(min9))
# print(conf_scores_4[min9])
# print(conf_scores_9[min4])

# _, axs = plt.subplots(2,9, figsize=(20, 10))
# axs = axs.flatten()
# for img, ax in zip(images_to_show, axs):
#     ax.imshow(img, cmap='gray')
# plt.show()

# _, axs = plt.subplots(20,10, figsize=(40, 20))
# axs = axs.flatten()
# for img, ax in zip(images_to_show, axs):
#     ax.imshow(img, cmap='gray')
# plt.show()

# Shuffle and see results of projection
!python /content/gdrive/MyDrive/MIT/9.58/assemblies_mnist_demo/classify_project_shuffle.py
